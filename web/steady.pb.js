// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: steady.proto
/* eslint-disable */

import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";

//========================================//
//         Steady Protobuf Client         //
//========================================//

export async function Login(loginRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/Login",
    LoginRequest.encode(loginRequest),
    config
  );
  return LoginResponse.decode(response);
}

export async function Signup(signupRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/Signup",
    SignupRequest.encode(signupRequest),
    config
  );
  return SignupResponse.decode(response);
}

export async function Logout(logoutRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/Logout",
    LogoutRequest.encode(logoutRequest),
    config
  );
  return LogoutResponse.decode(response);
}

export async function GetUser(getUserRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/GetUser",
    GetUserRequest.encode(getUserRequest),
    config
  );
  return GetUserResponse.decode(response);
}

export async function ValidateToken(validateTokenRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/ValidateToken",
    ValidateTokenRequest.encode(validateTokenRequest),
    config
  );
  return ValidateTokenResponse.decode(response);
}

export async function CreateService(createServiceRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/CreateService",
    CreateServiceRequest.encode(createServiceRequest),
    config
  );
  return CreateServiceResponse.decode(response);
}

export async function CreateServiceVersion(
  createServiceVersionRequest,
  config
) {
  const response = await PBrequest(
    "/steady.steady.Steady/CreateServiceVersion",
    CreateServiceVersionRequest.encode(createServiceVersionRequest),
    config
  );
  return CreateServiceVersionResponse.decode(response);
}

export async function RunApplication(runApplicationRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/RunApplication",
    RunApplicationRequest.encode(runApplicationRequest),
    config
  );
  return RunApplicationResponse.decode(response);
}

export async function GetApplication(getApplicationRequest, config) {
  const response = await PBrequest(
    "/steady.steady.Steady/GetApplication",
    GetApplicationRequest.encode(getApplicationRequest),
    config
  );
  return GetApplicationResponse.decode(response);
}

//========================================//
//           Steady JSON Client           //
//========================================//

export async function LoginJSON(loginRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/Login",
    LoginRequestJSON.encode(loginRequest),
    config
  );
  return LoginResponseJSON.decode(response);
}

export async function SignupJSON(signupRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/Signup",
    SignupRequestJSON.encode(signupRequest),
    config
  );
  return SignupResponseJSON.decode(response);
}

export async function LogoutJSON(logoutRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/Logout",
    LogoutRequestJSON.encode(logoutRequest),
    config
  );
  return LogoutResponseJSON.decode(response);
}

export async function GetUserJSON(getUserRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/GetUser",
    GetUserRequestJSON.encode(getUserRequest),
    config
  );
  return GetUserResponseJSON.decode(response);
}

export async function ValidateTokenJSON(validateTokenRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/ValidateToken",
    ValidateTokenRequestJSON.encode(validateTokenRequest),
    config
  );
  return ValidateTokenResponseJSON.decode(response);
}

export async function CreateServiceJSON(createServiceRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/CreateService",
    CreateServiceRequestJSON.encode(createServiceRequest),
    config
  );
  return CreateServiceResponseJSON.decode(response);
}

export async function CreateServiceVersionJSON(
  createServiceVersionRequest,
  config
) {
  const response = await JSONrequest(
    "/steady.steady.Steady/CreateServiceVersion",
    CreateServiceVersionRequestJSON.encode(createServiceVersionRequest),
    config
  );
  return CreateServiceVersionResponseJSON.decode(response);
}

export async function RunApplicationJSON(runApplicationRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/RunApplication",
    RunApplicationRequestJSON.encode(runApplicationRequest),
    config
  );
  return RunApplicationResponseJSON.decode(response);
}

export async function GetApplicationJSON(getApplicationRequest, config) {
  const response = await JSONrequest(
    "/steady.steady.Steady/GetApplication",
    GetApplicationRequestJSON.encode(getApplicationRequest),
    config
  );
  return GetApplicationResponseJSON.decode(response);
}

export function createSteady(service) {
  return {
    name: "steady.steady.Steady",
    methods: {
      Login: {
        name: "Login",
        handler: service.Login,
        input: { protobuf: LoginRequest, json: LoginRequestJSON },
        output: { protobuf: LoginResponse, json: LoginResponseJSON },
      },
      Signup: {
        name: "Signup",
        handler: service.Signup,
        input: { protobuf: SignupRequest, json: SignupRequestJSON },
        output: { protobuf: SignupResponse, json: SignupResponseJSON },
      },
      Logout: {
        name: "Logout",
        handler: service.Logout,
        input: { protobuf: LogoutRequest, json: LogoutRequestJSON },
        output: { protobuf: LogoutResponse, json: LogoutResponseJSON },
      },
      GetUser: {
        name: "GetUser",
        handler: service.GetUser,
        input: { protobuf: GetUserRequest, json: GetUserRequestJSON },
        output: { protobuf: GetUserResponse, json: GetUserResponseJSON },
      },
      ValidateToken: {
        name: "ValidateToken",
        handler: service.ValidateToken,
        input: {
          protobuf: ValidateTokenRequest,
          json: ValidateTokenRequestJSON,
        },
        output: {
          protobuf: ValidateTokenResponse,
          json: ValidateTokenResponseJSON,
        },
      },
      CreateService: {
        name: "CreateService",
        handler: service.CreateService,
        input: {
          protobuf: CreateServiceRequest,
          json: CreateServiceRequestJSON,
        },
        output: {
          protobuf: CreateServiceResponse,
          json: CreateServiceResponseJSON,
        },
      },
      CreateServiceVersion: {
        name: "CreateServiceVersion",
        handler: service.CreateServiceVersion,
        input: {
          protobuf: CreateServiceVersionRequest,
          json: CreateServiceVersionRequestJSON,
        },
        output: {
          protobuf: CreateServiceVersionResponse,
          json: CreateServiceVersionResponseJSON,
        },
      },
      RunApplication: {
        name: "RunApplication",
        handler: service.RunApplication,
        input: {
          protobuf: RunApplicationRequest,
          json: RunApplicationRequestJSON,
        },
        output: {
          protobuf: RunApplicationResponse,
          json: RunApplicationResponseJSON,
        },
      },
      GetApplication: {
        name: "GetApplication",
        handler: service.GetApplication,
        input: {
          protobuf: GetApplicationRequest,
          json: GetApplicationRequestJSON,
        },
        output: {
          protobuf: GetApplicationResponse,
          json: GetApplicationResponseJSON,
        },
      },
    },
  };
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const LoginRequest = {
  /**
   * Serializes LoginRequest to protobuf.
   */
  encode: function (msg) {
    return LoginRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LoginRequest from protobuf.
   */
  decode: function (bytes) {
    return LoginRequest._readMessage(
      LoginRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LoginRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LoginResponse = {
  /**
   * Serializes LoginResponse to protobuf.
   */
  encode: function (msg) {
    return LoginResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LoginResponse from protobuf.
   */
  decode: function (bytes) {
    return LoginResponse._readMessage(
      LoginResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LoginResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SignupRequest = {
  /**
   * Serializes SignupRequest to protobuf.
   */
  encode: function (msg) {
    return SignupRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SignupRequest from protobuf.
   */
  decode: function (bytes) {
    return SignupRequest._readMessage(
      SignupRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SignupRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SignupResponse = {
  /**
   * Serializes SignupResponse to protobuf.
   */
  encode: function (msg) {
    return SignupResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SignupResponse from protobuf.
   */
  decode: function (bytes) {
    return SignupResponse._readMessage(
      SignupResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SignupResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LogoutRequest = {
  /**
   * Serializes LogoutRequest to protobuf.
   */
  encode: function (msg) {
    return LogoutRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LogoutRequest from protobuf.
   */
  decode: function (bytes) {
    return LogoutRequest._readMessage(
      LogoutRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LogoutRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      userSessionToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.userSessionToken) {
      writer.writeString(1, msg.userSessionToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.userSessionToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LogoutResponse = {
  /**
   * Serializes LogoutResponse to protobuf.
   */
  encode: function (_msg) {
    return new Uint8Array();
  },

  /**
   * Deserializes LogoutResponse from protobuf.
   */
  decode: function (_bytes) {
    return {};
  },

  /**
   * Initializes LogoutResponse with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg, writer) {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg, _reader) {
    return _msg;
  },
};

export const User = {
  /**
   * Serializes User to protobuf.
   */
  encode: function (msg) {
    return User._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes User from protobuf.
   */
  decode: function (bytes) {
    return User._readMessage(User.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: 0n,
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.id) {
      writer.writeInt64String(1, msg.id.toString());
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    if (msg.email) {
      writer.writeString(3, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        case 3: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserRequest = {
  /**
   * Serializes GetUserRequest to protobuf.
   */
  encode: function (_msg) {
    return new Uint8Array();
  },

  /**
   * Deserializes GetUserRequest from protobuf.
   */
  decode: function (_bytes) {
    return {};
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg, writer) {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (_msg, _reader) {
    return _msg;
  },
};

export const GetUserResponse = {
  /**
   * Serializes GetUserResponse to protobuf.
   */
  encode: function (msg) {
    return GetUserResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserResponse from protobuf.
   */
  decode: function (bytes) {
    return GetUserResponse._readMessage(
      GetUserResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetUserResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ValidateTokenRequest = {
  /**
   * Serializes ValidateTokenRequest to protobuf.
   */
  encode: function (msg) {
    return ValidateTokenRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ValidateTokenRequest from protobuf.
   */
  decode: function (bytes) {
    return ValidateTokenRequest._readMessage(
      ValidateTokenRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ValidateTokenRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      token: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.token) {
      writer.writeString(1, msg.token);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.token = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ValidateTokenResponse = {
  /**
   * Serializes ValidateTokenResponse to protobuf.
   */
  encode: function (msg) {
    return ValidateTokenResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ValidateTokenResponse from protobuf.
   */
  decode: function (bytes) {
    return ValidateTokenResponse._readMessage(
      ValidateTokenResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ValidateTokenResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: User.initialize(),
      userSessionToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    if (msg.userSessionToken) {
      writer.writeString(2, msg.userSessionToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        case 2: {
          msg.userSessionToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateServiceRequest = {
  /**
   * Serializes CreateServiceRequest to protobuf.
   */
  encode: function (msg) {
    return CreateServiceRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateServiceRequest from protobuf.
   */
  decode: function (bytes) {
    return CreateServiceRequest._readMessage(
      CreateServiceRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreateServiceRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateServiceResponse = {
  /**
   * Serializes CreateServiceResponse to protobuf.
   */
  encode: function (msg) {
    return CreateServiceResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateServiceResponse from protobuf.
   */
  decode: function (bytes) {
    return CreateServiceResponse._readMessage(
      CreateServiceResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreateServiceResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      service: Service.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.service) {
      writer.writeMessage(1, msg.service, Service._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.service, Service._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Service = {
  /**
   * Serializes Service to protobuf.
   */
  encode: function (msg) {
    return Service._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Service from protobuf.
   */
  decode: function (bytes) {
    return Service._readMessage(Service.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Service with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
      id: 0n,
      userId: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.id) {
      writer.writeInt64String(2, msg.id.toString());
    }
    if (msg.userId) {
      writer.writeInt64String(3, msg.userId.toString());
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.userId = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateServiceVersionRequest = {
  /**
   * Serializes CreateServiceVersionRequest to protobuf.
   */
  encode: function (msg) {
    return CreateServiceVersionRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateServiceVersionRequest from protobuf.
   */
  decode: function (bytes) {
    return CreateServiceVersionRequest._readMessage(
      CreateServiceVersionRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreateServiceVersionRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      serviceId: 0n,
      version: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.serviceId) {
      writer.writeInt64String(1, msg.serviceId.toString());
    }
    if (msg.version) {
      writer.writeString(2, msg.version);
    }
    if (msg.source) {
      writer.writeString(3, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.serviceId = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.version = reader.readString();
          break;
        }
        case 3: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const CreateServiceVersionResponse = {
  /**
   * Serializes CreateServiceVersionResponse to protobuf.
   */
  encode: function (msg) {
    return CreateServiceVersionResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes CreateServiceVersionResponse from protobuf.
   */
  decode: function (bytes) {
    return CreateServiceVersionResponse._readMessage(
      CreateServiceVersionResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes CreateServiceVersionResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      serviceVersion: ServiceVersion.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.serviceVersion) {
      writer.writeMessage(1, msg.serviceVersion, ServiceVersion._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.serviceVersion, ServiceVersion._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ServiceVersion = {
  /**
   * Serializes ServiceVersion to protobuf.
   */
  encode: function (msg) {
    return ServiceVersion._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ServiceVersion from protobuf.
   */
  decode: function (bytes) {
    return ServiceVersion._readMessage(
      ServiceVersion.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ServiceVersion with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: 0n,
      serviceId: 0n,
      version: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.id) {
      writer.writeInt64String(1, msg.id.toString());
    }
    if (msg.serviceId) {
      writer.writeInt64String(2, msg.serviceId.toString());
    }
    if (msg.version) {
      writer.writeString(3, msg.version);
    }
    if (msg.source) {
      writer.writeString(4, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.serviceId = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.version = reader.readString();
          break;
        }
        case 4: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RunApplicationRequest = {
  /**
   * Serializes RunApplicationRequest to protobuf.
   */
  encode: function (msg) {
    return RunApplicationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RunApplicationRequest from protobuf.
   */
  decode: function (bytes) {
    return RunApplicationRequest._readMessage(
      RunApplicationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RunApplicationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
      serviceVersionId: undefined,
      source: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.serviceVersionId != undefined) {
      writer.writeInt64String(2, msg.serviceVersionId.toString());
    }
    if (msg.source != undefined) {
      writer.writeString(3, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 2: {
          msg.serviceVersionId = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RunApplicationResponse = {
  /**
   * Serializes RunApplicationResponse to protobuf.
   */
  encode: function (msg) {
    return RunApplicationResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RunApplicationResponse from protobuf.
   */
  decode: function (bytes) {
    return RunApplicationResponse._readMessage(
      RunApplicationResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RunApplicationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      application: Application.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.application) {
      writer.writeMessage(1, msg.application, Application._writeMessage);
    }
    if (msg.url) {
      writer.writeString(2, msg.url);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.application, Application._readMessage);
          break;
        }
        case 2: {
          msg.url = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Application = {
  /**
   * Serializes Application to protobuf.
   */
  encode: function (msg) {
    return Application._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Application from protobuf.
   */
  decode: function (bytes) {
    return Application._readMessage(
      Application.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Application with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: 0n,
      serviceVersionId: 0n,
      userId: 0n,
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.id) {
      writer.writeInt64String(1, msg.id.toString());
    }
    if (msg.serviceVersionId) {
      writer.writeInt64String(2, msg.serviceVersionId.toString());
    }
    if (msg.userId) {
      writer.writeInt64String(3, msg.userId.toString());
    }
    if (msg.name) {
      writer.writeString(4, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.serviceVersionId = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.userId = BigInt(reader.readInt64String());
          break;
        }
        case 4: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetApplicationRequest = {
  /**
   * Serializes GetApplicationRequest to protobuf.
   */
  encode: function (msg) {
    return GetApplicationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetApplicationRequest from protobuf.
   */
  decode: function (bytes) {
    return GetApplicationRequest._readMessage(
      GetApplicationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetApplicationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetApplicationResponse = {
  /**
   * Serializes GetApplicationResponse to protobuf.
   */
  encode: function (msg) {
    return GetApplicationResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetApplicationResponse from protobuf.
   */
  decode: function (bytes) {
    return GetApplicationResponse._readMessage(
      GetApplicationResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetApplicationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      application: Application.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg, writer) {
    if (msg.application) {
      writer.writeMessage(1, msg.application, Application._writeMessage);
    }
    if (msg.url) {
      writer.writeString(2, msg.url);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg, reader) {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.application, Application._readMessage);
          break;
        }
        case 2: {
          msg.url = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const LoginRequestJSON = {
  /**
   * Serializes LoginRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(LoginRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes LoginRequest from JSON.
   */
  decode: function (json) {
    return LoginRequestJSON._readMessage(
      LoginRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LoginRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const LoginResponseJSON = {
  /**
   * Serializes LoginResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(LoginResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes LoginResponse from JSON.
   */
  decode: function (json) {
    return LoginResponseJSON._readMessage(
      LoginResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LoginResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: UserJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    return msg;
  },
};

export const SignupRequestJSON = {
  /**
   * Serializes SignupRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(SignupRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SignupRequest from JSON.
   */
  decode: function (json) {
    return SignupRequestJSON._readMessage(
      SignupRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SignupRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const SignupResponseJSON = {
  /**
   * Serializes SignupResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(SignupResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SignupResponse from JSON.
   */
  decode: function (json) {
    return SignupResponseJSON._readMessage(
      SignupResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SignupResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: UserJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    return msg;
  },
};

export const LogoutRequestJSON = {
  /**
   * Serializes LogoutRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(LogoutRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes LogoutRequest from JSON.
   */
  decode: function (json) {
    return LogoutRequestJSON._readMessage(
      LogoutRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LogoutRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      userSessionToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.userSessionToken) {
      json["userSessionToken"] = msg.userSessionToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _userSessionToken_ =
      json["userSessionToken"] ?? json["user_session_token"];
    if (_userSessionToken_) {
      msg.userSessionToken = _userSessionToken_;
    }
    return msg;
  },
};

export const LogoutResponseJSON = {
  /**
   * Serializes LogoutResponse to JSON.
   */
  encode: function (_msg) {
    return "{}";
  },

  /**
   * Deserializes LogoutResponse from JSON.
   */
  decode: function (_json) {
    return {};
  },

  /**
   * Initializes LogoutResponse with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg) {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg, _json) {
    return msg;
  },
};

export const UserJSON = {
  /**
   * Serializes User to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(UserJSON._writeMessage(msg));
  },

  /**
   * Deserializes User from JSON.
   */
  decode: function (json) {
    return UserJSON._readMessage(UserJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: 0n,
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.id) {
      json["id"] = msg.id.toString();
    }
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = BigInt(_id_);
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const GetUserRequestJSON = {
  /**
   * Serializes GetUserRequest to JSON.
   */
  encode: function (_msg) {
    return "{}";
  },

  /**
   * Deserializes GetUserRequest from JSON.
   */
  decode: function (_json) {
    return {};
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function () {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (_msg) {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg, _json) {
    return msg;
  },
};

export const GetUserResponseJSON = {
  /**
   * Serializes GetUserResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(GetUserResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserResponse from JSON.
   */
  decode: function (json) {
    return GetUserResponseJSON._readMessage(
      GetUserResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetUserResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: UserJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    return msg;
  },
};

export const ValidateTokenRequestJSON = {
  /**
   * Serializes ValidateTokenRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ValidateTokenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ValidateTokenRequest from JSON.
   */
  decode: function (json) {
    return ValidateTokenRequestJSON._readMessage(
      ValidateTokenRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ValidateTokenRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      token: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.token) {
      json["token"] = msg.token;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    return msg;
  },
};

export const ValidateTokenResponseJSON = {
  /**
   * Serializes ValidateTokenResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ValidateTokenResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ValidateTokenResponse from JSON.
   */
  decode: function (json) {
    return ValidateTokenResponseJSON._readMessage(
      ValidateTokenResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ValidateTokenResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      user: UserJSON.initialize(),
      userSessionToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.userSessionToken) {
      json["userSessionToken"] = msg.userSessionToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    const _userSessionToken_ =
      json["userSessionToken"] ?? json["user_session_token"];
    if (_userSessionToken_) {
      msg.userSessionToken = _userSessionToken_;
    }
    return msg;
  },
};

export const CreateServiceRequestJSON = {
  /**
   * Serializes CreateServiceRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CreateServiceRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateServiceRequest from JSON.
   */
  decode: function (json) {
    return CreateServiceRequestJSON._readMessage(
      CreateServiceRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreateServiceRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const CreateServiceResponseJSON = {
  /**
   * Serializes CreateServiceResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CreateServiceResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateServiceResponse from JSON.
   */
  decode: function (json) {
    return CreateServiceResponseJSON._readMessage(
      CreateServiceResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreateServiceResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      service: ServiceJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.service) {
      const _service_ = ServiceJSON._writeMessage(msg.service);
      if (Object.keys(_service_).length > 0) {
        json["service"] = _service_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _service_ = json["service"];
    if (_service_) {
      const m = Service.initialize();
      ServiceJSON._readMessage(m, _service_);
      msg.service = m;
    }
    return msg;
  },
};

export const ServiceJSON = {
  /**
   * Serializes Service to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ServiceJSON._writeMessage(msg));
  },

  /**
   * Deserializes Service from JSON.
   */
  decode: function (json) {
    return ServiceJSON._readMessage(ServiceJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Service with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
      id: 0n,
      userId: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.id) {
      json["id"] = msg.id.toString();
    }
    if (msg.userId) {
      json["userId"] = msg.userId.toString();
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _id_ = json["id"];
    if (_id_) {
      msg.id = BigInt(_id_);
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = BigInt(_userId_);
    }
    return msg;
  },
};

export const CreateServiceVersionRequestJSON = {
  /**
   * Serializes CreateServiceVersionRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CreateServiceVersionRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateServiceVersionRequest from JSON.
   */
  decode: function (json) {
    return CreateServiceVersionRequestJSON._readMessage(
      CreateServiceVersionRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreateServiceVersionRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      serviceId: 0n,
      version: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.serviceId) {
      json["serviceId"] = msg.serviceId.toString();
    }
    if (msg.version) {
      json["version"] = msg.version;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _serviceId_ = json["serviceId"] ?? json["service_id"];
    if (_serviceId_) {
      msg.serviceId = BigInt(_serviceId_);
    }
    const _version_ = json["version"];
    if (_version_) {
      msg.version = _version_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const CreateServiceVersionResponseJSON = {
  /**
   * Serializes CreateServiceVersionResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(CreateServiceVersionResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes CreateServiceVersionResponse from JSON.
   */
  decode: function (json) {
    return CreateServiceVersionResponseJSON._readMessage(
      CreateServiceVersionResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes CreateServiceVersionResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      serviceVersion: ServiceVersionJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.serviceVersion) {
      const _serviceVersion_ = ServiceVersionJSON._writeMessage(
        msg.serviceVersion
      );
      if (Object.keys(_serviceVersion_).length > 0) {
        json["serviceVersion"] = _serviceVersion_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _serviceVersion_ = json["serviceVersion"] ?? json["service_version"];
    if (_serviceVersion_) {
      const m = ServiceVersion.initialize();
      ServiceVersionJSON._readMessage(m, _serviceVersion_);
      msg.serviceVersion = m;
    }
    return msg;
  },
};

export const ServiceVersionJSON = {
  /**
   * Serializes ServiceVersion to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ServiceVersionJSON._writeMessage(msg));
  },

  /**
   * Deserializes ServiceVersion from JSON.
   */
  decode: function (json) {
    return ServiceVersionJSON._readMessage(
      ServiceVersionJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ServiceVersion with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: 0n,
      serviceId: 0n,
      version: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.id) {
      json["id"] = msg.id.toString();
    }
    if (msg.serviceId) {
      json["serviceId"] = msg.serviceId.toString();
    }
    if (msg.version) {
      json["version"] = msg.version;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = BigInt(_id_);
    }
    const _serviceId_ = json["serviceId"] ?? json["service_id"];
    if (_serviceId_) {
      msg.serviceId = BigInt(_serviceId_);
    }
    const _version_ = json["version"];
    if (_version_) {
      msg.version = _version_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const RunApplicationRequestJSON = {
  /**
   * Serializes RunApplicationRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(RunApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes RunApplicationRequest from JSON.
   */
  decode: function (json) {
    return RunApplicationRequestJSON._readMessage(
      RunApplicationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RunApplicationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
      serviceVersionId: undefined,
      source: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.serviceVersionId != undefined) {
      json["serviceVersionId"] = msg.serviceVersionId.toString();
    }
    if (msg.source != undefined) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _serviceVersionId_ =
      json["serviceVersionId"] ?? json["service_version_id"];
    if (_serviceVersionId_) {
      msg.serviceVersionId = BigInt(_serviceVersionId_);
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const RunApplicationResponseJSON = {
  /**
   * Serializes RunApplicationResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(RunApplicationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes RunApplicationResponse from JSON.
   */
  decode: function (json) {
    return RunApplicationResponseJSON._readMessage(
      RunApplicationResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RunApplicationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      application: ApplicationJSON.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.application) {
      const _application_ = ApplicationJSON._writeMessage(msg.application);
      if (Object.keys(_application_).length > 0) {
        json["application"] = _application_;
      }
    }
    if (msg.url) {
      json["url"] = msg.url;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _application_ = json["application"];
    if (_application_) {
      const m = Application.initialize();
      ApplicationJSON._readMessage(m, _application_);
      msg.application = m;
    }
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    return msg;
  },
};

export const ApplicationJSON = {
  /**
   * Serializes Application to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(ApplicationJSON._writeMessage(msg));
  },

  /**
   * Deserializes Application from JSON.
   */
  decode: function (json) {
    return ApplicationJSON._readMessage(
      ApplicationJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Application with all fields set to their default value.
   */
  initialize: function () {
    return {
      id: 0n,
      serviceVersionId: 0n,
      userId: 0n,
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.id) {
      json["id"] = msg.id.toString();
    }
    if (msg.serviceVersionId) {
      json["serviceVersionId"] = msg.serviceVersionId.toString();
    }
    if (msg.userId) {
      json["userId"] = msg.userId.toString();
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = BigInt(_id_);
    }
    const _serviceVersionId_ =
      json["serviceVersionId"] ?? json["service_version_id"];
    if (_serviceVersionId_) {
      msg.serviceVersionId = BigInt(_serviceVersionId_);
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = BigInt(_userId_);
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const GetApplicationRequestJSON = {
  /**
   * Serializes GetApplicationRequest to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(GetApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetApplicationRequest from JSON.
   */
  decode: function (json) {
    return GetApplicationRequestJSON._readMessage(
      GetApplicationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetApplicationRequest with all fields set to their default value.
   */
  initialize: function () {
    return {
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const GetApplicationResponseJSON = {
  /**
   * Serializes GetApplicationResponse to JSON.
   */
  encode: function (msg) {
    return JSON.stringify(GetApplicationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetApplicationResponse from JSON.
   */
  decode: function (json) {
    return GetApplicationResponseJSON._readMessage(
      GetApplicationResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetApplicationResponse with all fields set to their default value.
   */
  initialize: function () {
    return {
      application: ApplicationJSON.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg) {
    const json = {};
    if (msg.application) {
      const _application_ = ApplicationJSON._writeMessage(msg.application);
      if (Object.keys(_application_).length > 0) {
        json["application"] = _application_;
      }
    }
    if (msg.url) {
      json["url"] = msg.url;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg, json) {
    const _application_ = json["application"];
    if (_application_) {
      const m = Application.initialize();
      ApplicationJSON._readMessage(m, _application_);
      msg.application = m;
    }
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    return msg;
  },
};
