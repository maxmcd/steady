// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: steady.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import { BinaryReader, BinaryWriter } from "protoscript";
import { JSONrequest, PBrequest } from "twirpscript";
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export { MIN_SUPPORTED_VERSION_0_0_56 } from "twirpscript";
import type { ClientConfiguration } from "twirpscript";

//========================================//
//                 Types                  //
//========================================//

export interface LoginRequest {
  username: string;
  email: string;
}

export interface LoginResponse {
  user: User;
}

export interface SignupRequest {
  username: string;
  email: string;
}

export interface SignupResponse {
  user: User;
}

export interface LogoutRequest {}

export interface LogoutResponse {}

export interface User {
  id: bigint;
  username: string;
  email: string;
}

export interface GetUserRequest {}

export interface GetUserResponse {
  user: User;
}

export interface ValidateTokenRequest {
  token: string;
}

export interface ValidateTokenResponse {
  user: User;
  userSessionToken: string;
}

export interface RunApplicationRequest {
  name: string;
  source: string;
}

export interface RunApplicationResponse {
  application: Application;
  url: string;
}

export interface Application {
  id: bigint;
  userId: bigint;
  name: string;
  source: string;
}

export interface GetApplicationRequest {
  name: string;
}

export interface GetApplicationResponse {
  application: Application;
  url: string;
}

export interface UpdateApplicationRequest {
  name: string;
  source: string;
}

export interface UpdateApplicationResponse {
  application: Application;
}

//========================================//
//         Steady Protobuf Client         //
//========================================//

export async function Login(
  loginRequest: LoginRequest,
  config?: ClientConfiguration
): Promise<LoginResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/Login",
    LoginRequest.encode(loginRequest),
    config
  );
  return LoginResponse.decode(response);
}

export async function Signup(
  signupRequest: SignupRequest,
  config?: ClientConfiguration
): Promise<SignupResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/Signup",
    SignupRequest.encode(signupRequest),
    config
  );
  return SignupResponse.decode(response);
}

export async function Logout(
  logoutRequest: LogoutRequest,
  config?: ClientConfiguration
): Promise<LogoutResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/Logout",
    LogoutRequest.encode(logoutRequest),
    config
  );
  return LogoutResponse.decode(response);
}

export async function GetUser(
  getUserRequest: GetUserRequest,
  config?: ClientConfiguration
): Promise<GetUserResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/GetUser",
    GetUserRequest.encode(getUserRequest),
    config
  );
  return GetUserResponse.decode(response);
}

export async function ValidateToken(
  validateTokenRequest: ValidateTokenRequest,
  config?: ClientConfiguration
): Promise<ValidateTokenResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/ValidateToken",
    ValidateTokenRequest.encode(validateTokenRequest),
    config
  );
  return ValidateTokenResponse.decode(response);
}

export async function RunApplication(
  runApplicationRequest: RunApplicationRequest,
  config?: ClientConfiguration
): Promise<RunApplicationResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/RunApplication",
    RunApplicationRequest.encode(runApplicationRequest),
    config
  );
  return RunApplicationResponse.decode(response);
}

export async function GetApplication(
  getApplicationRequest: GetApplicationRequest,
  config?: ClientConfiguration
): Promise<GetApplicationResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/GetApplication",
    GetApplicationRequest.encode(getApplicationRequest),
    config
  );
  return GetApplicationResponse.decode(response);
}

export async function UpdateApplication(
  updateApplicationRequest: UpdateApplicationRequest,
  config?: ClientConfiguration
): Promise<UpdateApplicationResponse> {
  const response = await PBrequest(
    "/steady.steady.Steady/UpdateApplication",
    UpdateApplicationRequest.encode(updateApplicationRequest),
    config
  );
  return UpdateApplicationResponse.decode(response);
}

//========================================//
//           Steady JSON Client           //
//========================================//

export async function LoginJSON(
  loginRequest: LoginRequest,
  config?: ClientConfiguration
): Promise<LoginResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/Login",
    LoginRequestJSON.encode(loginRequest),
    config
  );
  return LoginResponseJSON.decode(response);
}

export async function SignupJSON(
  signupRequest: SignupRequest,
  config?: ClientConfiguration
): Promise<SignupResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/Signup",
    SignupRequestJSON.encode(signupRequest),
    config
  );
  return SignupResponseJSON.decode(response);
}

export async function LogoutJSON(
  logoutRequest: LogoutRequest,
  config?: ClientConfiguration
): Promise<LogoutResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/Logout",
    LogoutRequestJSON.encode(logoutRequest),
    config
  );
  return LogoutResponseJSON.decode(response);
}

export async function GetUserJSON(
  getUserRequest: GetUserRequest,
  config?: ClientConfiguration
): Promise<GetUserResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/GetUser",
    GetUserRequestJSON.encode(getUserRequest),
    config
  );
  return GetUserResponseJSON.decode(response);
}

export async function ValidateTokenJSON(
  validateTokenRequest: ValidateTokenRequest,
  config?: ClientConfiguration
): Promise<ValidateTokenResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/ValidateToken",
    ValidateTokenRequestJSON.encode(validateTokenRequest),
    config
  );
  return ValidateTokenResponseJSON.decode(response);
}

export async function RunApplicationJSON(
  runApplicationRequest: RunApplicationRequest,
  config?: ClientConfiguration
): Promise<RunApplicationResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/RunApplication",
    RunApplicationRequestJSON.encode(runApplicationRequest),
    config
  );
  return RunApplicationResponseJSON.decode(response);
}

export async function GetApplicationJSON(
  getApplicationRequest: GetApplicationRequest,
  config?: ClientConfiguration
): Promise<GetApplicationResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/GetApplication",
    GetApplicationRequestJSON.encode(getApplicationRequest),
    config
  );
  return GetApplicationResponseJSON.decode(response);
}

export async function UpdateApplicationJSON(
  updateApplicationRequest: UpdateApplicationRequest,
  config?: ClientConfiguration
): Promise<UpdateApplicationResponse> {
  const response = await JSONrequest(
    "/steady.steady.Steady/UpdateApplication",
    UpdateApplicationRequestJSON.encode(updateApplicationRequest),
    config
  );
  return UpdateApplicationResponseJSON.decode(response);
}

//========================================//
//                 Steady                 //
//========================================//

export interface Steady<Context = unknown> {
  Login: (
    loginRequest: LoginRequest,
    context: Context
  ) => Promise<LoginResponse> | LoginResponse;
  Signup: (
    signupRequest: SignupRequest,
    context: Context
  ) => Promise<SignupResponse> | SignupResponse;
  Logout: (
    logoutRequest: LogoutRequest,
    context: Context
  ) => Promise<LogoutResponse> | LogoutResponse;
  GetUser: (
    getUserRequest: GetUserRequest,
    context: Context
  ) => Promise<GetUserResponse> | GetUserResponse;
  ValidateToken: (
    validateTokenRequest: ValidateTokenRequest,
    context: Context
  ) => Promise<ValidateTokenResponse> | ValidateTokenResponse;
  RunApplication: (
    runApplicationRequest: RunApplicationRequest,
    context: Context
  ) => Promise<RunApplicationResponse> | RunApplicationResponse;
  GetApplication: (
    getApplicationRequest: GetApplicationRequest,
    context: Context
  ) => Promise<GetApplicationResponse> | GetApplicationResponse;
  UpdateApplication: (
    updateApplicationRequest: UpdateApplicationRequest,
    context: Context
  ) => Promise<UpdateApplicationResponse> | UpdateApplicationResponse;
}

export function createSteady<Context>(service: Steady<Context>) {
  return {
    name: "steady.steady.Steady",
    methods: {
      Login: {
        name: "Login",
        handler: service.Login,
        input: { protobuf: LoginRequest, json: LoginRequestJSON },
        output: { protobuf: LoginResponse, json: LoginResponseJSON },
      },
      Signup: {
        name: "Signup",
        handler: service.Signup,
        input: { protobuf: SignupRequest, json: SignupRequestJSON },
        output: { protobuf: SignupResponse, json: SignupResponseJSON },
      },
      Logout: {
        name: "Logout",
        handler: service.Logout,
        input: { protobuf: LogoutRequest, json: LogoutRequestJSON },
        output: { protobuf: LogoutResponse, json: LogoutResponseJSON },
      },
      GetUser: {
        name: "GetUser",
        handler: service.GetUser,
        input: { protobuf: GetUserRequest, json: GetUserRequestJSON },
        output: { protobuf: GetUserResponse, json: GetUserResponseJSON },
      },
      ValidateToken: {
        name: "ValidateToken",
        handler: service.ValidateToken,
        input: {
          protobuf: ValidateTokenRequest,
          json: ValidateTokenRequestJSON,
        },
        output: {
          protobuf: ValidateTokenResponse,
          json: ValidateTokenResponseJSON,
        },
      },
      RunApplication: {
        name: "RunApplication",
        handler: service.RunApplication,
        input: {
          protobuf: RunApplicationRequest,
          json: RunApplicationRequestJSON,
        },
        output: {
          protobuf: RunApplicationResponse,
          json: RunApplicationResponseJSON,
        },
      },
      GetApplication: {
        name: "GetApplication",
        handler: service.GetApplication,
        input: {
          protobuf: GetApplicationRequest,
          json: GetApplicationRequestJSON,
        },
        output: {
          protobuf: GetApplicationResponse,
          json: GetApplicationResponseJSON,
        },
      },
      UpdateApplication: {
        name: "UpdateApplication",
        handler: service.UpdateApplication,
        input: {
          protobuf: UpdateApplicationRequest,
          json: UpdateApplicationRequestJSON,
        },
        output: {
          protobuf: UpdateApplicationResponse,
          json: UpdateApplicationResponseJSON,
        },
      },
    },
  } as const;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const LoginRequest = {
  /**
   * Serializes LoginRequest to protobuf.
   */
  encode: function (msg: Partial<LoginRequest>): Uint8Array {
    return LoginRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LoginRequest from protobuf.
   */
  decode: function (bytes: ByteSource): LoginRequest {
    return LoginRequest._readMessage(
      LoginRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LoginRequest with all fields set to their default value.
   */
  initialize: function (): LoginRequest {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LoginRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: LoginRequest,
    reader: BinaryReader
  ): LoginRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LoginResponse = {
  /**
   * Serializes LoginResponse to protobuf.
   */
  encode: function (msg: Partial<LoginResponse>): Uint8Array {
    return LoginResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes LoginResponse from protobuf.
   */
  decode: function (bytes: ByteSource): LoginResponse {
    return LoginResponse._readMessage(
      LoginResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes LoginResponse with all fields set to their default value.
   */
  initialize: function (): LoginResponse {
    return {
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LoginResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: LoginResponse,
    reader: BinaryReader
  ): LoginResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SignupRequest = {
  /**
   * Serializes SignupRequest to protobuf.
   */
  encode: function (msg: Partial<SignupRequest>): Uint8Array {
    return SignupRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SignupRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SignupRequest {
    return SignupRequest._readMessage(
      SignupRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SignupRequest with all fields set to their default value.
   */
  initialize: function (): SignupRequest {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SignupRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.username) {
      writer.writeString(1, msg.username);
    }
    if (msg.email) {
      writer.writeString(2, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SignupRequest,
    reader: BinaryReader
  ): SignupRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.username = reader.readString();
          break;
        }
        case 2: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SignupResponse = {
  /**
   * Serializes SignupResponse to protobuf.
   */
  encode: function (msg: Partial<SignupResponse>): Uint8Array {
    return SignupResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes SignupResponse from protobuf.
   */
  decode: function (bytes: ByteSource): SignupResponse {
    return SignupResponse._readMessage(
      SignupResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes SignupResponse with all fields set to their default value.
   */
  initialize: function (): SignupResponse {
    return {
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SignupResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SignupResponse,
    reader: BinaryReader
  ): SignupResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const LogoutRequest = {
  /**
   * Serializes LogoutRequest to protobuf.
   */
  encode: function (_msg?: Partial<LogoutRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes LogoutRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): LogoutRequest {
    return {};
  },

  /**
   * Initializes LogoutRequest with all fields set to their default value.
   */
  initialize: function (): LogoutRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<LogoutRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: LogoutRequest,
    _reader: BinaryReader
  ): LogoutRequest {
    return _msg;
  },
};

export const LogoutResponse = {
  /**
   * Serializes LogoutResponse to protobuf.
   */
  encode: function (_msg?: Partial<LogoutResponse>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes LogoutResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): LogoutResponse {
    return {};
  },

  /**
   * Initializes LogoutResponse with all fields set to their default value.
   */
  initialize: function (): LogoutResponse {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<LogoutResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: LogoutResponse,
    _reader: BinaryReader
  ): LogoutResponse {
    return _msg;
  },
};

export const User = {
  /**
   * Serializes User to protobuf.
   */
  encode: function (msg: Partial<User>): Uint8Array {
    return User._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes User from protobuf.
   */
  decode: function (bytes: ByteSource): User {
    return User._readMessage(User.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (): User {
    return {
      id: 0n,
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<User>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt64String(1, msg.id.toString() as any);
    }
    if (msg.username) {
      writer.writeString(2, msg.username);
    }
    if (msg.email) {
      writer.writeString(3, msg.email);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, reader: BinaryReader): User {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.username = reader.readString();
          break;
        }
        case 3: {
          msg.email = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetUserRequest = {
  /**
   * Serializes GetUserRequest to protobuf.
   */
  encode: function (_msg?: Partial<GetUserRequest>): Uint8Array {
    return new Uint8Array();
  },

  /**
   * Deserializes GetUserRequest from protobuf.
   */
  decode: function (_bytes?: ByteSource): GetUserRequest {
    return {};
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function (): GetUserRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<GetUserRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    _msg: GetUserRequest,
    _reader: BinaryReader
  ): GetUserRequest {
    return _msg;
  },
};

export const GetUserResponse = {
  /**
   * Serializes GetUserResponse to protobuf.
   */
  encode: function (msg: Partial<GetUserResponse>): Uint8Array {
    return GetUserResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetUserResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetUserResponse {
    return GetUserResponse._readMessage(
      GetUserResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetUserResponse with all fields set to their default value.
   */
  initialize: function (): GetUserResponse {
    return {
      user: User.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetUserResponse,
    reader: BinaryReader
  ): GetUserResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ValidateTokenRequest = {
  /**
   * Serializes ValidateTokenRequest to protobuf.
   */
  encode: function (msg: Partial<ValidateTokenRequest>): Uint8Array {
    return ValidateTokenRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ValidateTokenRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ValidateTokenRequest {
    return ValidateTokenRequest._readMessage(
      ValidateTokenRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ValidateTokenRequest with all fields set to their default value.
   */
  initialize: function (): ValidateTokenRequest {
    return {
      token: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ValidateTokenRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.token) {
      writer.writeString(1, msg.token);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ValidateTokenRequest,
    reader: BinaryReader
  ): ValidateTokenRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.token = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const ValidateTokenResponse = {
  /**
   * Serializes ValidateTokenResponse to protobuf.
   */
  encode: function (msg: Partial<ValidateTokenResponse>): Uint8Array {
    return ValidateTokenResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes ValidateTokenResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ValidateTokenResponse {
    return ValidateTokenResponse._readMessage(
      ValidateTokenResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes ValidateTokenResponse with all fields set to their default value.
   */
  initialize: function (): ValidateTokenResponse {
    return {
      user: User.initialize(),
      userSessionToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ValidateTokenResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.user) {
      writer.writeMessage(1, msg.user, User._writeMessage);
    }
    if (msg.userSessionToken) {
      writer.writeString(2, msg.userSessionToken);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ValidateTokenResponse,
    reader: BinaryReader
  ): ValidateTokenResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.user, User._readMessage);
          break;
        }
        case 2: {
          msg.userSessionToken = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RunApplicationRequest = {
  /**
   * Serializes RunApplicationRequest to protobuf.
   */
  encode: function (msg: Partial<RunApplicationRequest>): Uint8Array {
    return RunApplicationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RunApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): RunApplicationRequest {
    return RunApplicationRequest._readMessage(
      RunApplicationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RunApplicationRequest with all fields set to their default value.
   */
  initialize: function (): RunApplicationRequest {
    return {
      name: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RunApplicationRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.source) {
      writer.writeString(3, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RunApplicationRequest,
    reader: BinaryReader
  ): RunApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const RunApplicationResponse = {
  /**
   * Serializes RunApplicationResponse to protobuf.
   */
  encode: function (msg: Partial<RunApplicationResponse>): Uint8Array {
    return RunApplicationResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes RunApplicationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): RunApplicationResponse {
    return RunApplicationResponse._readMessage(
      RunApplicationResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes RunApplicationResponse with all fields set to their default value.
   */
  initialize: function (): RunApplicationResponse {
    return {
      application: Application.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RunApplicationResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.application) {
      writer.writeMessage(1, msg.application, Application._writeMessage);
    }
    if (msg.url) {
      writer.writeString(2, msg.url);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RunApplicationResponse,
    reader: BinaryReader
  ): RunApplicationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.application, Application._readMessage);
          break;
        }
        case 2: {
          msg.url = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const Application = {
  /**
   * Serializes Application to protobuf.
   */
  encode: function (msg: Partial<Application>): Uint8Array {
    return Application._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Application from protobuf.
   */
  decode: function (bytes: ByteSource): Application {
    return Application._readMessage(
      Application.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes Application with all fields set to their default value.
   */
  initialize: function (): Application {
    return {
      id: 0n,
      userId: 0n,
      name: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Application>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.id) {
      writer.writeInt64String(1, msg.id.toString() as any);
    }
    if (msg.userId) {
      writer.writeInt64String(2, msg.userId.toString() as any);
    }
    if (msg.name) {
      writer.writeString(3, msg.name);
    }
    if (msg.source) {
      writer.writeString(4, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Application, reader: BinaryReader): Application {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.id = BigInt(reader.readInt64String());
          break;
        }
        case 2: {
          msg.userId = BigInt(reader.readInt64String());
          break;
        }
        case 3: {
          msg.name = reader.readString();
          break;
        }
        case 4: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetApplicationRequest = {
  /**
   * Serializes GetApplicationRequest to protobuf.
   */
  encode: function (msg: Partial<GetApplicationRequest>): Uint8Array {
    return GetApplicationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetApplicationRequest {
    return GetApplicationRequest._readMessage(
      GetApplicationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetApplicationRequest with all fields set to their default value.
   */
  initialize: function (): GetApplicationRequest {
    return {
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetApplicationRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetApplicationRequest,
    reader: BinaryReader
  ): GetApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const GetApplicationResponse = {
  /**
   * Serializes GetApplicationResponse to protobuf.
   */
  encode: function (msg: Partial<GetApplicationResponse>): Uint8Array {
    return GetApplicationResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes GetApplicationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetApplicationResponse {
    return GetApplicationResponse._readMessage(
      GetApplicationResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes GetApplicationResponse with all fields set to their default value.
   */
  initialize: function (): GetApplicationResponse {
    return {
      application: Application.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetApplicationResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.application) {
      writer.writeMessage(1, msg.application, Application._writeMessage);
    }
    if (msg.url) {
      writer.writeString(2, msg.url);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetApplicationResponse,
    reader: BinaryReader
  ): GetApplicationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.application, Application._readMessage);
          break;
        }
        case 2: {
          msg.url = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateApplicationRequest = {
  /**
   * Serializes UpdateApplicationRequest to protobuf.
   */
  encode: function (msg: Partial<UpdateApplicationRequest>): Uint8Array {
    return UpdateApplicationRequest._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateApplicationRequest from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateApplicationRequest {
    return UpdateApplicationRequest._readMessage(
      UpdateApplicationRequest.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UpdateApplicationRequest with all fields set to their default value.
   */
  initialize: function (): UpdateApplicationRequest {
    return {
      name: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateApplicationRequest>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.name) {
      writer.writeString(1, msg.name);
    }
    if (msg.source) {
      writer.writeString(3, msg.source);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateApplicationRequest,
    reader: BinaryReader
  ): UpdateApplicationRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.name = reader.readString();
          break;
        }
        case 3: {
          msg.source = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const UpdateApplicationResponse = {
  /**
   * Serializes UpdateApplicationResponse to protobuf.
   */
  encode: function (msg: Partial<UpdateApplicationResponse>): Uint8Array {
    return UpdateApplicationResponse._writeMessage(
      msg,
      new BinaryWriter()
    ).getResultBuffer();
  },

  /**
   * Deserializes UpdateApplicationResponse from protobuf.
   */
  decode: function (bytes: ByteSource): UpdateApplicationResponse {
    return UpdateApplicationResponse._readMessage(
      UpdateApplicationResponse.initialize(),
      new BinaryReader(bytes)
    );
  },

  /**
   * Initializes UpdateApplicationResponse with all fields set to their default value.
   */
  initialize: function (): UpdateApplicationResponse {
    return {
      application: Application.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateApplicationResponse>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.application) {
      writer.writeMessage(1, msg.application, Application._writeMessage);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateApplicationResponse,
    reader: BinaryReader
  ): UpdateApplicationResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.application, Application._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const LoginRequestJSON = {
  /**
   * Serializes LoginRequest to JSON.
   */
  encode: function (msg: Partial<LoginRequest>): string {
    return JSON.stringify(LoginRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes LoginRequest from JSON.
   */
  decode: function (json: string): LoginRequest {
    return LoginRequestJSON._readMessage(
      LoginRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LoginRequest with all fields set to their default value.
   */
  initialize: function (): LoginRequest {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LoginRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: LoginRequest, json: any): LoginRequest {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const LoginResponseJSON = {
  /**
   * Serializes LoginResponse to JSON.
   */
  encode: function (msg: Partial<LoginResponse>): string {
    return JSON.stringify(LoginResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes LoginResponse from JSON.
   */
  decode: function (json: string): LoginResponse {
    return LoginResponseJSON._readMessage(
      LoginResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes LoginResponse with all fields set to their default value.
   */
  initialize: function (): LoginResponse {
    return {
      user: UserJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<LoginResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: LoginResponse, json: any): LoginResponse {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    return msg;
  },
};

export const SignupRequestJSON = {
  /**
   * Serializes SignupRequest to JSON.
   */
  encode: function (msg: Partial<SignupRequest>): string {
    return JSON.stringify(SignupRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes SignupRequest from JSON.
   */
  decode: function (json: string): SignupRequest {
    return SignupRequestJSON._readMessage(
      SignupRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SignupRequest with all fields set to their default value.
   */
  initialize: function (): SignupRequest {
    return {
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SignupRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SignupRequest, json: any): SignupRequest {
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const SignupResponseJSON = {
  /**
   * Serializes SignupResponse to JSON.
   */
  encode: function (msg: Partial<SignupResponse>): string {
    return JSON.stringify(SignupResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes SignupResponse from JSON.
   */
  decode: function (json: string): SignupResponse {
    return SignupResponseJSON._readMessage(
      SignupResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes SignupResponse with all fields set to their default value.
   */
  initialize: function (): SignupResponse {
    return {
      user: UserJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<SignupResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SignupResponse, json: any): SignupResponse {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    return msg;
  },
};

export const LogoutRequestJSON = {
  /**
   * Serializes LogoutRequest to JSON.
   */
  encode: function (_msg?: Partial<LogoutRequest>): string {
    return "{}";
  },

  /**
   * Deserializes LogoutRequest from JSON.
   */
  decode: function (_json?: string): LogoutRequest {
    return {};
  },

  /**
   * Initializes LogoutRequest with all fields set to their default value.
   */
  initialize: function (): LogoutRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<LogoutRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: LogoutRequest, _json: any): LogoutRequest {
    return msg;
  },
};

export const LogoutResponseJSON = {
  /**
   * Serializes LogoutResponse to JSON.
   */
  encode: function (_msg?: Partial<LogoutResponse>): string {
    return "{}";
  },

  /**
   * Deserializes LogoutResponse from JSON.
   */
  decode: function (_json?: string): LogoutResponse {
    return {};
  },

  /**
   * Initializes LogoutResponse with all fields set to their default value.
   */
  initialize: function (): LogoutResponse {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<LogoutResponse>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: LogoutResponse, _json: any): LogoutResponse {
    return msg;
  },
};

export const UserJSON = {
  /**
   * Serializes User to JSON.
   */
  encode: function (msg: Partial<User>): string {
    return JSON.stringify(UserJSON._writeMessage(msg));
  },

  /**
   * Deserializes User from JSON.
   */
  decode: function (json: string): User {
    return UserJSON._readMessage(UserJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (): User {
    return {
      id: 0n,
      username: "",
      email: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<User>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id.toString();
    }
    if (msg.username) {
      json["username"] = msg.username;
    }
    if (msg.email) {
      json["email"] = msg.email;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, json: any): User {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = BigInt(_id_);
    }
    const _username_ = json["username"];
    if (_username_) {
      msg.username = _username_;
    }
    const _email_ = json["email"];
    if (_email_) {
      msg.email = _email_;
    }
    return msg;
  },
};

export const GetUserRequestJSON = {
  /**
   * Serializes GetUserRequest to JSON.
   */
  encode: function (_msg?: Partial<GetUserRequest>): string {
    return "{}";
  },

  /**
   * Deserializes GetUserRequest from JSON.
   */
  decode: function (_json?: string): GetUserRequest {
    return {};
  },

  /**
   * Initializes GetUserRequest with all fields set to their default value.
   */
  initialize: function (): GetUserRequest {
    return {};
  },

  /**
   * @private
   */
  _writeMessage: function (
    _msg: Partial<GetUserRequest>
  ): Record<string, unknown> {
    return {};
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetUserRequest, _json: any): GetUserRequest {
    return msg;
  },
};

export const GetUserResponseJSON = {
  /**
   * Serializes GetUserResponse to JSON.
   */
  encode: function (msg: Partial<GetUserResponse>): string {
    return JSON.stringify(GetUserResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetUserResponse from JSON.
   */
  decode: function (json: string): GetUserResponse {
    return GetUserResponseJSON._readMessage(
      GetUserResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetUserResponse with all fields set to their default value.
   */
  initialize: function (): GetUserResponse {
    return {
      user: UserJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetUserResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetUserResponse, json: any): GetUserResponse {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    return msg;
  },
};

export const ValidateTokenRequestJSON = {
  /**
   * Serializes ValidateTokenRequest to JSON.
   */
  encode: function (msg: Partial<ValidateTokenRequest>): string {
    return JSON.stringify(ValidateTokenRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes ValidateTokenRequest from JSON.
   */
  decode: function (json: string): ValidateTokenRequest {
    return ValidateTokenRequestJSON._readMessage(
      ValidateTokenRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ValidateTokenRequest with all fields set to their default value.
   */
  initialize: function (): ValidateTokenRequest {
    return {
      token: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ValidateTokenRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.token) {
      json["token"] = msg.token;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ValidateTokenRequest,
    json: any
  ): ValidateTokenRequest {
    const _token_ = json["token"];
    if (_token_) {
      msg.token = _token_;
    }
    return msg;
  },
};

export const ValidateTokenResponseJSON = {
  /**
   * Serializes ValidateTokenResponse to JSON.
   */
  encode: function (msg: Partial<ValidateTokenResponse>): string {
    return JSON.stringify(ValidateTokenResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes ValidateTokenResponse from JSON.
   */
  decode: function (json: string): ValidateTokenResponse {
    return ValidateTokenResponseJSON._readMessage(
      ValidateTokenResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes ValidateTokenResponse with all fields set to their default value.
   */
  initialize: function (): ValidateTokenResponse {
    return {
      user: UserJSON.initialize(),
      userSessionToken: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<ValidateTokenResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.user) {
      const _user_ = UserJSON._writeMessage(msg.user);
      if (Object.keys(_user_).length > 0) {
        json["user"] = _user_;
      }
    }
    if (msg.userSessionToken) {
      json["userSessionToken"] = msg.userSessionToken;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: ValidateTokenResponse,
    json: any
  ): ValidateTokenResponse {
    const _user_ = json["user"];
    if (_user_) {
      const m = User.initialize();
      UserJSON._readMessage(m, _user_);
      msg.user = m;
    }
    const _userSessionToken_ =
      json["userSessionToken"] ?? json["user_session_token"];
    if (_userSessionToken_) {
      msg.userSessionToken = _userSessionToken_;
    }
    return msg;
  },
};

export const RunApplicationRequestJSON = {
  /**
   * Serializes RunApplicationRequest to JSON.
   */
  encode: function (msg: Partial<RunApplicationRequest>): string {
    return JSON.stringify(RunApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes RunApplicationRequest from JSON.
   */
  decode: function (json: string): RunApplicationRequest {
    return RunApplicationRequestJSON._readMessage(
      RunApplicationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RunApplicationRequest with all fields set to their default value.
   */
  initialize: function (): RunApplicationRequest {
    return {
      name: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RunApplicationRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RunApplicationRequest,
    json: any
  ): RunApplicationRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const RunApplicationResponseJSON = {
  /**
   * Serializes RunApplicationResponse to JSON.
   */
  encode: function (msg: Partial<RunApplicationResponse>): string {
    return JSON.stringify(RunApplicationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes RunApplicationResponse from JSON.
   */
  decode: function (json: string): RunApplicationResponse {
    return RunApplicationResponseJSON._readMessage(
      RunApplicationResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes RunApplicationResponse with all fields set to their default value.
   */
  initialize: function (): RunApplicationResponse {
    return {
      application: ApplicationJSON.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<RunApplicationResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.application) {
      const _application_ = ApplicationJSON._writeMessage(msg.application);
      if (Object.keys(_application_).length > 0) {
        json["application"] = _application_;
      }
    }
    if (msg.url) {
      json["url"] = msg.url;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: RunApplicationResponse,
    json: any
  ): RunApplicationResponse {
    const _application_ = json["application"];
    if (_application_) {
      const m = Application.initialize();
      ApplicationJSON._readMessage(m, _application_);
      msg.application = m;
    }
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    return msg;
  },
};

export const ApplicationJSON = {
  /**
   * Serializes Application to JSON.
   */
  encode: function (msg: Partial<Application>): string {
    return JSON.stringify(ApplicationJSON._writeMessage(msg));
  },

  /**
   * Deserializes Application from JSON.
   */
  decode: function (json: string): Application {
    return ApplicationJSON._readMessage(
      ApplicationJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes Application with all fields set to their default value.
   */
  initialize: function (): Application {
    return {
      id: 0n,
      userId: 0n,
      name: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Application>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.id) {
      json["id"] = msg.id.toString();
    }
    if (msg.userId) {
      json["userId"] = msg.userId.toString();
    }
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Application, json: any): Application {
    const _id_ = json["id"];
    if (_id_) {
      msg.id = BigInt(_id_);
    }
    const _userId_ = json["userId"] ?? json["user_id"];
    if (_userId_) {
      msg.userId = BigInt(_userId_);
    }
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const GetApplicationRequestJSON = {
  /**
   * Serializes GetApplicationRequest to JSON.
   */
  encode: function (msg: Partial<GetApplicationRequest>): string {
    return JSON.stringify(GetApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetApplicationRequest from JSON.
   */
  decode: function (json: string): GetApplicationRequest {
    return GetApplicationRequestJSON._readMessage(
      GetApplicationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetApplicationRequest with all fields set to their default value.
   */
  initialize: function (): GetApplicationRequest {
    return {
      name: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetApplicationRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetApplicationRequest,
    json: any
  ): GetApplicationRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    return msg;
  },
};

export const GetApplicationResponseJSON = {
  /**
   * Serializes GetApplicationResponse to JSON.
   */
  encode: function (msg: Partial<GetApplicationResponse>): string {
    return JSON.stringify(GetApplicationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes GetApplicationResponse from JSON.
   */
  decode: function (json: string): GetApplicationResponse {
    return GetApplicationResponseJSON._readMessage(
      GetApplicationResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes GetApplicationResponse with all fields set to their default value.
   */
  initialize: function (): GetApplicationResponse {
    return {
      application: ApplicationJSON.initialize(),
      url: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<GetApplicationResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.application) {
      const _application_ = ApplicationJSON._writeMessage(msg.application);
      if (Object.keys(_application_).length > 0) {
        json["application"] = _application_;
      }
    }
    if (msg.url) {
      json["url"] = msg.url;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: GetApplicationResponse,
    json: any
  ): GetApplicationResponse {
    const _application_ = json["application"];
    if (_application_) {
      const m = Application.initialize();
      ApplicationJSON._readMessage(m, _application_);
      msg.application = m;
    }
    const _url_ = json["url"];
    if (_url_) {
      msg.url = _url_;
    }
    return msg;
  },
};

export const UpdateApplicationRequestJSON = {
  /**
   * Serializes UpdateApplicationRequest to JSON.
   */
  encode: function (msg: Partial<UpdateApplicationRequest>): string {
    return JSON.stringify(UpdateApplicationRequestJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateApplicationRequest from JSON.
   */
  decode: function (json: string): UpdateApplicationRequest {
    return UpdateApplicationRequestJSON._readMessage(
      UpdateApplicationRequestJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UpdateApplicationRequest with all fields set to their default value.
   */
  initialize: function (): UpdateApplicationRequest {
    return {
      name: "",
      source: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateApplicationRequest>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.name) {
      json["name"] = msg.name;
    }
    if (msg.source) {
      json["source"] = msg.source;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateApplicationRequest,
    json: any
  ): UpdateApplicationRequest {
    const _name_ = json["name"];
    if (_name_) {
      msg.name = _name_;
    }
    const _source_ = json["source"];
    if (_source_) {
      msg.source = _source_;
    }
    return msg;
  },
};

export const UpdateApplicationResponseJSON = {
  /**
   * Serializes UpdateApplicationResponse to JSON.
   */
  encode: function (msg: Partial<UpdateApplicationResponse>): string {
    return JSON.stringify(UpdateApplicationResponseJSON._writeMessage(msg));
  },

  /**
   * Deserializes UpdateApplicationResponse from JSON.
   */
  decode: function (json: string): UpdateApplicationResponse {
    return UpdateApplicationResponseJSON._readMessage(
      UpdateApplicationResponseJSON.initialize(),
      JSON.parse(json)
    );
  },

  /**
   * Initializes UpdateApplicationResponse with all fields set to their default value.
   */
  initialize: function (): UpdateApplicationResponse {
    return {
      application: ApplicationJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<UpdateApplicationResponse>
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.application) {
      const _application_ = ApplicationJSON._writeMessage(msg.application);
      if (Object.keys(_application_).length > 0) {
        json["application"] = _application_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: UpdateApplicationResponse,
    json: any
  ): UpdateApplicationResponse {
    const _application_ = json["application"];
    if (_application_) {
      const m = Application.initialize();
      ApplicationJSON._readMessage(m, _application_);
      msg.application = m;
    }
    return msg;
  },
};
