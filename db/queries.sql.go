// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: queries.sql

package db

import (
	"context"
)

const createService = `-- name: CreateService :one
INSERT INTO services (name, user_id)
VALUES (?, ?)
RETURNING id, name, user_id
`

type CreateServiceParams struct {
	Name   string
	UserID int64
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.queryRow(ctx, q.createServiceStmt, createService, arg.Name, arg.UserID)
	var i Service
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const createServiceVersion = `-- name: CreateServiceVersion :one
INSERT INTO service_versions (service_id, version, source)
VALUES (?, ?, ?)
RETURNING id, service_id, version, source
`

type CreateServiceVersionParams struct {
	ServiceID int64
	Version   string
	Source    string
}

func (q *Queries) CreateServiceVersion(ctx context.Context, arg CreateServiceVersionParams) (ServiceVersion, error) {
	row := q.queryRow(ctx, q.createServiceVersionStmt, createServiceVersion, arg.ServiceID, arg.Version, arg.Source)
	var i ServiceVersion
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.Version,
		&i.Source,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, username)
VALUES (?, ?)
RETURNING id, email, username
`

type CreateUserParams struct {
	Email    string
	Username string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Email, arg.Username)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Username)
	return i, err
}

const getServiceVersion = `-- name: GetServiceVersion :one
SELECT id, service_id, version, source
FROM service_versions
WHERE version = ?
`

func (q *Queries) GetServiceVersion(ctx context.Context, version string) (ServiceVersion, error) {
	row := q.queryRow(ctx, q.getServiceVersionStmt, getServiceVersion, version)
	var i ServiceVersion
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.Version,
		&i.Source,
	)
	return i, err
}

const getServiceVersions = `-- name: GetServiceVersions :many
SELECT id, service_id, version, source
FROM service_versions
WHERE service_id = ?
`

func (q *Queries) GetServiceVersions(ctx context.Context, serviceID int64) ([]ServiceVersion, error) {
	rows, err := q.query(ctx, q.getServiceVersionsStmt, getServiceVersions, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceVersion
	for rows.Next() {
		var i ServiceVersion
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.Version,
			&i.Source,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, email, username
FROM users
WHERE id = ?
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(&i.ID, &i.Email, &i.Username)
	return i, err
}

const getUserApplications = `-- name: GetUserApplications :many
SELECT id, service_version_id, user_id, name
FROM applications
WHERE user_id = ?
`

func (q *Queries) GetUserApplications(ctx context.Context, userID int64) ([]Application, error) {
	rows, err := q.query(ctx, q.getUserApplicationsStmt, getUserApplications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.ServiceVersionID,
			&i.UserID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserServices = `-- name: GetUserServices :many
SELECT id, name, user_id
FROM services
WHERE user_id = ?
`

func (q *Queries) GetUserServices(ctx context.Context, userID int64) ([]Service, error) {
	rows, err := q.query(ctx, q.getUserServicesStmt, getUserServices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
